#version 460

#include "global_descriptors.glsl"
#include "c_shared/cull_data.h"
#include "lib/intrinsics.glsl"

DEFINE_STANDARD_BUFFER_REFERENCE( 4, CullDataBuffer, CullData );
DEFINE_STANDARD_BUFFER_REFERENCE( 4, MeshletDrawCommandBuffer, MeshletDrawCommand );

layout( scalar, push_constant ) uniform PushConstants
{
    CullDataBuffer cullDataBuffer;
    UintBuffer outputCountBuffer;
    MeshletDrawCommandBuffer indirectCmdOutputBuffer;
    uint numMeshes;
    uint _pad;
} pConstants;

AABB TransformAABB( const mat4 transform, const AABB aabb )
{
    AABB transformedAABB;
    transformedAABB.min = transformedAABB.max = transform[3].xyz;
    for ( int i = 0; i < 3; i++ )
    {
        for ( int j = 0; j < 3; j++ )
        {
            float a = transform[j][i] * aabb.min[j];
            float b = transform[j][i] * aabb.max[j];

            transformedAABB.min[i] += min( a, b );
            transformedAABB.max[i] += max( a, b );
        }
    }
    
    return transformedAABB;
}

layout (local_size_x = 64, local_size_y = 1) in;
void main() 
{
    uint meshIdx = gl_GlobalInvocationID.x;
    if ( meshIdx >= pConstants.numMeshes )
        return;
    
    CullData data = pConstants.cullDataBuffer.data[meshIdx];
    AABB localAABB = data.aabb;
    AABB worldAABB = TransformAABB( GetModelMatrix( data.modelIndex ), localAABB );
    bool visible = IsInFrustum( worldAABB );
    uint numVisibleInWave = WaveActiveCountBits( visible );
    uint localIndexInWave = WavePrefixCountBits( visible );
    
    uint globalBaseIndex;
    if ( WaveIsFirstLane() )
    {
        globalBaseIndex = atomicAdd( pConstants.outputCountBuffer.data[0], numVisibleInWave );
    }
    globalBaseIndex = WaveReadLaneFirst( globalBaseIndex );
    
    if ( visible )
    {
        uint globalIndex = globalBaseIndex + localIndexInWave;
        MeshletDrawCommand cmd;
        cmd.groupCountX = ( data.numMeshlets + 31 ) / 32;
        //cmd.groupCountX = data.numMeshlets;
        cmd.groupCountY = 1;
        cmd.groupCountZ = 1;
        cmd.meshIndex   = meshIdx;
        cmd.numMeshlets = data.numMeshlets;
        pConstants.indirectCmdOutputBuffer.data[globalIndex] = cmd;        
    }
}