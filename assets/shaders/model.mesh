#version 450

#extension GL_EXT_mesh_shader : require

#include "global_descriptors.glsl"
#include "c_shared/model.h"

DEFINE_BUFFER_REFERENCE( 4 ) PositionBuffer
{
    vec3 positions[];
};

DEFINE_BUFFER_REFERENCE( 4 ) NormalBuffer
{
    vec3 normals[];
};

DEFINE_BUFFER_REFERENCE( 4 ) Vec3Buffer
{
    vec3 data[];
};

DEFINE_BUFFER_REFERENCE( 4 ) Vec4Buffer
{
    vec4 data[];
};

DEFINE_BUFFER_REFERENCE( 4 ) TriBuffer
{
    uint tris[];
};

DEFINE_BUFFER_REFERENCE( 32 ) MeshletBuffer
{
    Meshlet meshlets[];
};

layout(push_constant) uniform Registers
{
    PerObjectData constants;
};

Meshlet GetMeshlet( uint meshletID )
{
    uint64_t ptr = bindlessBuffers[constants.bindlessRangeStart + MESH_BUFFER_MESHLETS];
    MeshletBuffer mBuffer = MeshletBuffer( ptr );
    return mBuffer.meshlets[meshletID];
}

uvec3 GetTri( const Meshlet meshlet, uint index )
{
    uint64_t ptr = bindlessBuffers[constants.bindlessRangeStart + MESH_BUFFER_TRIS];
    TriBuffer tBuffer = TriBuffer( ptr );
    uint packedTri = tBuffer.tris[meshlet.triOffset + index];
    uvec3 tri;
    tri.x = (packedTri >> 0)  & 0xFF;
    tri.y = (packedTri >> 8)  & 0xFF;
    tri.z = (packedTri >> 16) & 0xFF;
    return tri;
}

vec3 GetPos( const Meshlet meshlet, uint index )
{
    uint64_t ptr = bindlessBuffers[constants.bindlessRangeStart + MESH_BUFFER_POSITIONS];
    PositionBuffer buff = PositionBuffer( ptr );
    return buff.positions[meshlet.vertexOffset + index];
}

vec4 GetNormal( const Meshlet meshlet, uint index )
{
    uint64_t ptr = bindlessBuffers[constants.bindlessRangeStart + MESH_BUFFER_NORMALS];
    NormalBuffer buff = NormalBuffer( ptr );
    return vec4( buff.normals[meshlet.vertexOffset + index], 0 );
}

vec4 GetTangentAndSign( const Meshlet meshlet, uint index )
{
    uint64_t ptr = bindlessBuffers[constants.bindlessRangeStart + MESH_BUFFER_TANGENTS];
    if ( ptr == 0 )
        return vec4( 0 );
    
    Vec4Buffer buff = Vec4Buffer( ptr );
    return buff.data[meshlet.vertexOffset + index];
}

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

layout (location = 0) out PerVertexData
{
    vec3 normal;
    vec4 tangentAndSign;
#if IS_DEBUG_SHADER
    flat uint meshletIdx;
#endif // #if IS_DEBUG_SHADER
} v_out[];

void main()
{
    const uint meshletID = gl_WorkGroupID.x;
    const uint threadID = gl_LocalInvocationIndex;

    Meshlet meshlet = GetMeshlet( meshletID );
    if ( threadID == 0 )
    {
        SetMeshOutputsEXT( meshlet.vertexCount, meshlet.triangleCount );
    }

    if ( threadID < meshlet.vertexCount )
    {
        mat4 modelMatrix = GetModelMatrix( constants.objectIdx );
        
        vec4 localPos = vec4( GetPos( meshlet, threadID ), 1 );
        vec4 worldPos = modelMatrix * localPos;
        gl_MeshVerticesEXT[threadID].gl_Position = globals.VP * worldPos;
        
        vec4 localNormal = GetNormal( meshlet, threadID );
        v_out[threadID].normal = (GetNormalMatrix( constants.objectIdx ) * localNormal).xyz;
        
        vec4 tangentAndSign = GetTangentAndSign( meshlet, threadID );
        vec3 worldTangent = (modelMatrix * vec4( tangentAndSign.xyz, 0 )).xyz;
        v_out[threadID].tangentAndSign = vec4( worldTangent, tangentAndSign.w );
        
    #if IS_DEBUG_SHADER
        v_out[threadID].meshletIdx = meshletID;
    #endif // #if IS_DEBUG_SHADER
    }
    
    uint tri1_ID = 2 * threadID + 0;
    if ( tri1_ID < meshlet.triangleCount )
    {
        gl_PrimitiveTriangleIndicesEXT[tri1_ID] = GetTri( meshlet, tri1_ID );
    }
    
    uint tri2_ID = 2 * threadID + 1;
    if ( tri2_ID < meshlet.triangleCount )
    {
        gl_PrimitiveTriangleIndicesEXT[tri2_ID] = GetTri( meshlet, tri2_ID );
    }
}
