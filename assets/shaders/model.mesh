#version 450

#include "global_descriptors.glsl"
#include "c_shared/structs.h"
#extension GL_EXT_mesh_shader : require

DEFINE_GLOBAL_DESCRIPTORS();

DEFINE_BUFFER_REFERENCE( 4 ) PositionBuffer
{
    vec3 positions[];
};

DEFINE_BUFFER_REFERENCE( 4 ) TriBuffer
{
    uint tris[];
};

DEFINE_BUFFER_REFERENCE( 32 ) MeshletBuffer
{
    Meshlet meshlets[];
};

DEFINE_BUFFER_REFERENCE( 64 ) TransformBuffer
{
    mat4 transforms[];
};

layout(push_constant) uniform Registers
{
    PerObjectData constants;
};

uvec3 GetTri( const Meshlet meshlet, uint index )
{
    TriBuffer tBuffer = TriBuffer( bindlessBuffers[constants.triBuffer] );
    uint packedTri = tBuffer.tris[meshlet.triOffset + index];
    //uint packedTri = constants.triBuffer.tris[meshlet.triOffset + index];
    uvec3 tri;
    tri.x = (packedTri >> 0)  & 0xFF;
    tri.y = (packedTri >> 8)  & 0xFF;
    tri.z = (packedTri >> 16) & 0xFF;
    return tri;
}

vec3 GetPos( const Meshlet meshlet, uint index )
{
    PositionBuffer pBuffer = PositionBuffer( bindlessBuffers[constants.vertexBuffer] );
    vec3 pos = pBuffer.positions[meshlet.vertexOffset + index];
    //vec3 pos = constants.vertexBuffer.positions[meshlet.vertexOffset + index];
    return pos;
}

mat4 GetWorldMatrix()
{
    TransformBuffer tBuffer = TransformBuffer( bindlessBuffers[constants.transformBuffer] );
    return tBuffer.transforms[constants.modelMatrixIndex];
    //return constants.transformBuffer.transforms[constants.modelMatrixIndex];
}

Meshlet GetMeshlet( uint meshletID )
{
    MeshletBuffer mBuffer = MeshletBuffer( bindlessBuffers[constants.meshletBuffer] );
    return mBuffer.meshlets[meshletID];
    //return constants.meshletBuffer.meshlets[meshletID];
}

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

#if IS_DEBUG_SHADER
layout (location = 0) out PerVertexData
{
    flat uint meshletIdx;
} v_out[];
#endif // #if IS_DEBUG_SHADER

void main()
{
    const uint meshletID = gl_WorkGroupID.x;
    const uint threadID = gl_LocalInvocationIndex;

    Meshlet meshlet = GetMeshlet( meshletID );
    if ( threadID == 0 )
    {
        SetMeshOutputsEXT( meshlet.vertexCount, meshlet.triangleCount );
    }

    if ( threadID < meshlet.vertexCount )
    {
        vec4 localPos = vec4( GetPos( meshlet, threadID ), 1 );
        vec4 worldPos = GetWorldMatrix() * localPos;
        gl_MeshVerticesEXT[threadID].gl_Position = globals.VP * worldPos;
        
    #if IS_DEBUG_SHADER
        v_out[threadID].meshletIdx = meshletID;
    #endif // #if IS_DEBUG_SHADER
    }
    
    uint tri1_ID = 2 * threadID + 0;
    if ( tri1_ID < meshlet.triangleCount )
    {
        gl_PrimitiveTriangleIndicesEXT[tri1_ID] = GetTri( meshlet, tri1_ID );
    }
    
    uint tri2_ID = 2 * threadID + 1;
    if ( tri2_ID < meshlet.triangleCount )
    {
        gl_PrimitiveTriangleIndicesEXT[tri2_ID] = GetTri( meshlet, tri2_ID );
    }
}
