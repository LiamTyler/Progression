#version 450

#extension GL_EXT_mesh_shader : require

#include "global_descriptors.glsl"
#include "c_shared/model.h"
#include "c_shared/cull_data.h"
#include "c_shared/mesh_shading_defines.h"
#include "lib/intrinsics.glsl"
#include "lib/culling.glsl"
#include "c_shared/dvar_defines.h"

DEFINE_STANDARD_BUFFER_REFERENCE( 4, MeshletCullDataBuffer, PackedMeshletCullData );

#if INDIRECT_MAIN_DRAW

#extension GL_ARB_shader_draw_parameters : enable

DEFINE_STANDARD_BUFFER_REFERENCE( 4, MeshDataBuffer, PerObjectData );
DEFINE_STANDARD_BUFFER_REFERENCE( 4, MeshletDrawCommandBuffer, MeshletDrawCommand );

layout(scalar, push_constant) uniform Registers
{
    MeshDataBuffer meshDataBuffer;
    MeshletDrawCommandBuffer indirectMeshletDrawBuffer;
};

#else // #if INDIRECT_MAIN_DRAW

layout(scalar, push_constant) uniform Registers
{
    PerObjectData objectData;
};

#endif // #else // #if INDIRECT_MAIN_DRAW

MeshletCullData GetMeshletCullData( uint meshletID, uint bindlessRangeStart )
{
    uint64_t ptr = bindlessBuffers[bindlessRangeStart + MESH_BUFFER_MESHLET_CULL_DATA];
    MeshletCullDataBuffer cBuffer = MeshletCullDataBuffer( ptr );
    PackedMeshletCullData packedData = cBuffer.data[meshletID];
    
    MeshletCullData cullData;
    cullData.position = packedData.position;
    cullData.radius = packedData.radius;
    cullData.coneAxis = packedData.coneAxis;
    cullData.coneCutoff = packedData.coneCutoff;
    cullData.coneApex = packedData.coneApex;
    
    return cullData;
}

bool IsMeshletVisible( const uint modelIndex, const MeshletCullData meshletCullData )
{
    if ( !IsMeshletFrustumCullingEnabled() && !IsMeshletFrustumCullingEnabled() )
        return true;

    const mat4 M         = GetModelMatrix( modelIndex );
    vec3 worldPos        = vec3( M * vec4( meshletCullData.position, 1 ) );
    vec3 componentRadius = mat3( M ) * vec3( meshletCullData.radius );
    float worldRadius    = max( componentRadius.x, max( componentRadius.y, componentRadius.z ) );

    if ( IsMeshletFrustumCullingEnabled() )
    {
        if ( !IsSphereInFrustum( worldPos, worldRadius ) )
            return false;
    }

    if ( IsMeshletBackfaceCullingEnabled() )
    {
        vec3 worldApex = vec3( M * vec4( meshletCullData.coneApex, 1 ) );
        const mat4 N       = GetNormalMatrix( modelIndex );
        vec3 worldConeAxis = normalize( mat3( N ) * meshletCullData.coneAxis );
        if ( dot( normalize( worldApex - globals.cullingCameraPos.xyz ), worldConeAxis ) >= meshletCullData.coneCutoff )
            return false;
    }
    
    return true;
}

taskPayloadSharedEXT TaskOutput OUT;

layout(local_size_x = TASK_SHADER_WORKGROUP_SIZE) in;

void main()
{
    const uint baseMeshletID   = gl_WorkGroupID.x * TASK_SHADER_WORKGROUP_SIZE;
    const uint localMeshletID  = gl_LocalInvocationID.x;
    const uint globalMeshletID = baseMeshletID + localMeshletID;
    
#if INDIRECT_MAIN_DRAW
    const uint numMeshlets        = indirectMeshletDrawBuffer.data[gl_DrawIDARB].numMeshlets;
    const uint modelIndex         = indirectMeshletDrawBuffer.data[gl_DrawIDARB].modelIndex;
    const uint meshIndex          = indirectMeshletDrawBuffer.data[gl_DrawIDARB].meshIndex;
    const uint bindlessRangeStart = meshDataBuffer.data[meshIndex].bindlessRangeStart;
#else // #if INDIRECT_MAIN_DRAW
    const uint numMeshlets        = objectData.numMeshlets;
    const uint modelIndex         = objectData.modelIdx;
    const uint bindlessRangeStart = objectData.bindlessRangeStart;
#endif // #else // #if INDIRECT_MAIN_DRAW
    
    if ( globalMeshletID >= numMeshlets )
        return;
    
    MeshletCullData cullData = GetMeshletCullData( globalMeshletID, bindlessRangeStart );
    bool visible = IsMeshletVisible( modelIndex, cullData );
    uint numVisibleInWave = WaveActiveCountBits( visible );
    uint localIndexInWave = WavePrefixCountBits( visible );
    if ( visible )
    {
        OUT.deltaIDs[localIndexInWave] = uint8_t(localMeshletID);
    }
    
    if ( gl_LocalInvocationID.x == 0 )
    {
    #if INDIRECT_MAIN_DRAW
        OUT.meshIndex = meshIndex;
    #endif // #if INDIRECT_MAIN_DRAW
        OUT.baseID = baseMeshletID;
    }
    EmitMeshTasksEXT( numVisibleInWave, 1, 1 );
}
