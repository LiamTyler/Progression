#version 460

#include "global_descriptors.glsl"
#include "lib/culling.glsl"
#include "lib/intrinsics.glsl"

DEFINE_STANDARD_BUFFER_REFERENCE( 4, MeshCullDataBuffer, MeshCullData );
DEFINE_STANDARD_BUFFER_REFERENCE( 4, MeshletDrawCommandBuffer, MeshletDrawCommand );

layout( scalar, push_constant ) uniform PushConstants
{
    MeshCullDataBuffer meshCullDataBuffer;
    Vec4Buffer frustumPlanesBuffer;
    UintBuffer outputCountsBuffer;
    MeshletDrawCommandBuffer indirectCmdOutputBuffer;
    uint numMeshes;
    uint numFrustums;
} pConstants;

layout (local_size_x = 64, local_size_y = 1) in;
void main() 
{
    uint meshIdx = gl_GlobalInvocationID.x;
    if ( meshIdx >= pConstants.numMeshes )
        return;
    
    MeshCullData cullData = pConstants.meshCullDataBuffer.data[meshIdx];
    AABB localAABB = cullData.aabb;
    AABB worldAABB = TransformAABB( GetModelMatrix( cullData.modelIndex ), localAABB );
    
    for ( uint fIdx = 0; fIdx < pConstants.numFrustums; ++fIdx )
    {
        vec4 frustum[6];
        frustum[0] = pConstants.frustumPlanesBuffer.data[6 * fIdx + 0];
        frustum[1] = pConstants.frustumPlanesBuffer.data[6 * fIdx + 1];
        frustum[2] = pConstants.frustumPlanesBuffer.data[6 * fIdx + 2];
        frustum[3] = pConstants.frustumPlanesBuffer.data[6 * fIdx + 3];
        frustum[4] = pConstants.frustumPlanesBuffer.data[6 * fIdx + 4];
        frustum[5] = pConstants.frustumPlanesBuffer.data[6 * fIdx + 5];
        
        bool visible = IsInFrustum( worldAABB, frustum );
        if ( visible )
            atomicAdd( pConstants.outputCountsBuffer.data[fIdx], 1 );
    }
    
    /*
    bool visible = IsInFrustum( worldAABB );
    uint numVisibleInWave = WaveActiveCountBits( visible );
    uint localIndexInWave = WavePrefixCountBits( visible );
    
    uint globalBaseIndex;
    if ( WaveIsFirstLane() )
    {
        globalBaseIndex = atomicAdd( pConstants.outputCountBuffer.data[0], numVisibleInWave );
    }
    globalBaseIndex = WaveReadLaneFirst( globalBaseIndex );
    
    if ( visible )
    {
        MeshletDrawCommand cmd;
        cmd.groupCountX = ( cullData.numMeshlets + 31 ) / 32;
        //cmd.groupCountX = data.numMeshlets;
        cmd.groupCountY = 1;
        cmd.groupCountZ = 1;
        cmd.modelIndex  = cullData.modelIndex;
        cmd.meshIndex   = meshIdx;
        cmd.numMeshlets = cullData.numMeshlets;
        //cmd.meshletCullDataPtr = bindlessBuffers[objData.bindlessRangeStart + MESH_BUFFER_MESHLET_CULL_DATA];

        uint globalIndex = globalBaseIndex + localIndexInWave;
        pConstants.indirectCmdOutputBuffer.data[globalIndex] = cmd;        
    }
    */
}